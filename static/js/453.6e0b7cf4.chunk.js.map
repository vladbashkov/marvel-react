{"version":3,"file":"static/js/453.6e0b7cf4.chunk.js","mappings":"wPASMA,EAAa,SAACC,EAASC,EAAWC,GACpC,OAAQF,GACJ,IAAK,UACD,OAAO,SAACG,EAAA,EAAO,IAEnB,IAAK,UACD,OAAOD,GAAkB,SAACD,EAAS,KAAM,SAACE,EAAA,EAAO,IAErD,IAAK,YACD,OAAO,SAACF,EAAS,IAErB,IAAK,QACD,OAAO,SAACG,EAAA,EAAY,IAExB,QACI,MAAM,IAAIC,MAAM,4BAE5B,EA8EA,EA5EmB,WACf,OAAoCC,EAAAA,EAAAA,UAAS,IAAI,GAAD,YAAzCC,EAAU,KAAEC,EAAa,QACcF,EAAAA,EAAAA,WAAS,GAAO,GAAD,YAAtDJ,EAAe,KAAEO,EAAkB,QACdH,EAAAA,EAAAA,UAAS,KAAK,GAAD,YAAlCI,EAAM,KAAEC,EAAS,QACcL,EAAAA,EAAAA,WAAS,GAAM,eAA9CM,EAAW,KAAEC,EAAc,KAElC,GAA8CC,EAAAA,EAAAA,KAAtCC,EAAY,EAAZA,aAAcf,EAAO,EAAPA,QAASgB,EAAU,EAAVA,YAE/BC,EAAAA,EAAAA,YAAU,WACNC,EAAUR,GAAQ,EACtB,GAAG,IAEH,IAAMQ,EAAY,SAACR,EAAQS,GACbV,GAAVU,GACAJ,EAAaL,GACRU,KAAKC,GACLD,MAAK,kBAAMJ,EAAW,YAAY,GAC3C,EAEMK,EAAqB,SAACC,GACxB,IAAIC,GAAQ,EAETD,EAAcE,OAAS,IACtBD,GAAQ,GAGZf,GAAc,SAAAiB,GAAQ,wBAAQA,IAAQ,OAAKH,GAAa,IACxDb,GAAmB,GACnBE,EAAUD,EAAS,GACnBG,EAAeU,EACnB,EAgCA,OACI,iBAAKG,UAAU,eAAc,UACxB3B,EAAWC,GAAS,kBAxB7B,SAAqB2B,GACjB,IAAMC,EAAQD,EAAIE,KAAI,SAAAC,GAClB,IAAQC,EAA4BD,EAA5BC,MAAOC,EAAqBF,EAArBE,MAAOC,EAAcH,EAAdG,UAEtB,OACI,eAAIP,UAAU,eAAc,UACxB,UAAC,KAAI,CAACQ,GAAE,kBAAcJ,EAAKK,IAAK,WAC5B,gBAAKC,IAAKH,EAAWI,IAAKN,EAAOL,UAAU,sBAC3C,gBAAKA,UAAU,oBAAmB,SAAEK,KACpC,gBAAKL,UAAU,qBAAoB,SAAEM,QAJXF,EAAKK,GAQ/C,IAEA,OACI,eAAIT,UAAU,eAAc,SACvBE,GAGb,CAImCU,CAAY/B,EAAW,GAAEL,IACpD,mBACIqC,SAAUrC,EACVsC,MAAO,CAAC,QAAY5B,EAAc,OAAS,SAC3Cc,UAAU,mCACVe,QAAS,kBAAMvB,EAAUR,EAAO,EAAC,UACjC,gBAAKgB,UAAU,QAAO,2BAItC,ECjFA,EAhBmB,WACf,OACI,iCACI,UAACgB,EAAA,EAAM,YACH,iBACIC,KAAK,cACLC,QAAQ,4BAEZ,+CAEJ,SAACC,EAAA,EAAS,KACV,SAAC,EAAU,MAGvB,C","sources":["components/comicsList/ComicsList.js","components/pages/ComicsPage.js"],"sourcesContent":["import {useState, useEffect} from 'react';\nimport { Link } from 'react-router-dom';\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './comicsList.scss';\n\nconst setContent = (process, Component, newItemsLoading) => {\n    switch (process) {\n        case 'waiting':\n            return <Spinner />;\n            break;\n        case 'loading':\n            return newItemsLoading ? <Component /> : <Spinner />;\n            break;\n        case 'confirmed':\n            return <Component />;\n            break;\n        case 'error':\n            return <ErrorMessage />;\n            break;\n        default:\n            throw new Error('Unexpected process state');\n    }\n};\n\nconst ComicsList = () => {\n    const [comicsList, setComicsList] = useState([]),\n          [newItemsLoading, setNewItemsLoading] = useState(false),\n          [offset, setOffset] = useState(210), \n          [comicsEnded, setComicsEnded] = useState(false);\n\n    const { getAllComics, process, setProcess } = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemsLoading(false) : setNewItemsLoading(true);\n        getAllComics(offset)\n            .then(onComicsListLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n    const onComicsListLoaded = (newComicsList) => {\n        let ended = false;\n\n        if(newComicsList.length < 8) {\n            ended = true;\n        }\n\n        setComicsList(charList => [...charList, ...newComicsList]);\n        setNewItemsLoading(false);\n        setOffset(offset + 8);\n        setComicsEnded(ended);\n    }\n\n    // const itemRefs = useRef([]);\n\n    // const focusOnItem = (id) => {\n    //     itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n    //     itemRefs.current[id].classList.add('char__item_selected');\n    //     itemRefs.current[id].focus();\n    // }\n\n    function renderItems(arr) {\n        const items = arr.map(item => {\n            const { title, price, thumbnail } = item;\n\n            return (\n                <li className=\"comics__item\" key={item.id}>\n                    <Link to={ `/comics/${item.id}`} >\n                        <img src={thumbnail} alt={title} className=\"comics__item-img\"/>\n                        <div className=\"comics__item-name\">{title}</div>\n                        <div className=\"comics__item-price\">{price}</div>\n                    </Link>\n                </li>\n            )\n        })\n\n        return (\n            <ul className=\"comics__grid\">\n                {items}\n            </ul>\n        );\n    }\n\n    return (\n        <div className=\"comics__list\">\n            {setContent(process, () => renderItems(comicsList), newItemsLoading)}\n            <button \n                disabled={newItemsLoading} \n                style={{'display' : comicsEnded ? 'none' : 'block'}}\n                className=\"button button__main button__long\"\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nexport default ComicsList;","import { Helmet } from 'react-helmet';\n\nimport AppBanner from \"../appBanner/AppBanner\";\nimport ComicsList from \"../comicsList/ComicsList\";\n\nconst ComicsPage = () => {\n    return (\n        <>\n            <Helmet>\n                <meta \n                    name=\"description\"\n                    content=\"The list of the comics\"\n                />\n                <title>Comics Page</title>\n            </Helmet>\n            <AppBanner/>\n            <ComicsList/>\n        </>\n    )\n}\n\nexport default ComicsPage;"],"names":["setContent","process","Component","newItemsLoading","Spinner","ErrorMessage","Error","useState","comicsList","setComicsList","setNewItemsLoading","offset","setOffset","comicsEnded","setComicsEnded","useMarvelService","getAllComics","setProcess","useEffect","onRequest","initial","then","onComicsListLoaded","newComicsList","ended","length","charList","className","arr","items","map","item","title","price","thumbnail","to","id","src","alt","renderItems","disabled","style","onClick","Helmet","name","content","AppBanner"],"sourceRoot":""}