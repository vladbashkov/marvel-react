{"version":3,"file":"static/js/504.42021e02.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/charSearchForm/CharSearchForm.js","components/errorBoundary/ErrorBoundary.js","components/pages/MainPage.js","components/skeleton/Skeleton.js","services/MarvelService.js","hooks/http.hook.js","utils/setContent.js"],"sourcesContent":["import img from './error.gif';\n\nconst ErrorMessage = () => {\n    return (\n        <img style={{ display: 'block', width: \"250px\", height: \"250px\",objectFit: 'contain', margin: \"0 auto\"}}  src={img} alt=\"Error\" />\n    )\n}\n\nexport default ErrorMessage;","import { useState, useEffect } from 'react';\n\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n    const [char, setChar] = useState(null);\n\n    const { getCharacter, clearError, process, setProcess } = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n\n        const timerId = setInterval(updateChar, 60000);\n\n        return () => {\n            clearInterval(timerId)\n        }\n    }, [])\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        clearError();\n\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n\n        getCharacter(id)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n    \n\n    return (\n        <div className=\"randomchar\">\n            { setContent(process, View, char) }\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button \n                    className=\"button button__main\"\n                    onClick={updateChar}\n                >\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n}\n\nconst View = ({data}) => {\n    const {name, description, thumbnail, homepage, wiki} = data;\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail.indexOf('image_not_available') > -1) {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" style={ imgStyle } className=\"randomchar__img\"/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import { useState, useEffect, useRef, useMemo } from 'react';\nimport {CSSTransition, TransitionGroup} from 'react-transition-group';\nimport PropTypes from 'prop-types';\n\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Skeleton from '../skeleton/Skeleton';\nimport Spinner from '../spinner/Spinner';\n\nimport useMarvelService from '../../services/MarvelService';\n\nimport './charList.scss';\n\nconst setContent = (process, Component, newItemsLoading) => {\n    switch (process) {\n        case 'waiting':\n            return <Skeleton/>;\n            break;\n        case 'loading':\n            return newItemsLoading ? <Component /> : <Spinner />;\n            break;\n        case 'confirmed':\n            return <Component />;\n            break;\n        case 'error':\n            return <ErrorMessage />;\n            break;\n        default:\n            throw new Error('Unexpected process state');\n    }\n};\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]),\n          [newItemsLoading, setNewItemsLoading] = useState(false),\n          [offset, setOffset] = useState(210), \n          [charEnded, setCharEnded] = useState(false);\n\n    const { getAllCharacters, process, setProcess } = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemsLoading(false) : setNewItemsLoading(true);\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n    const onCharListLoaded = (newCharList) => {\n        let ended = false;\n\n        if(newCharList.length < 9) {\n            ended = true;\n        }\n\n        setCharList(charList => [...charList, ...newCharList]);\n        setNewItemsLoading(newItemsLoading => false);\n        setOffset(offset => offset + 9);\n        setCharEnded(charEnded => ended);\n    }\n\n    const itemRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        console.log('focus');\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n    function renderItems(arr) {\n        const items = arr.map((item, i) => {\n            const { id, name, thumbnail } = item;\n\n            let imgStyle = {'objectFit' : 'cover'};\n            if (thumbnail.indexOf('image_not_available') > -1) {\n                imgStyle = {'objectFit' : 'contain'};\n            }\n\n            return (\n                <CSSTransition key={item.id} timeout={500} classNames=\"char__item\">\n                    <li \n                        className=\"char__item\"\n                        tabIndex={0}\n                        ref={el => itemRefs.current[i] = el}\n                        key={id}\n                        onClick={() => {\n                            props.onCharSelected(item.id);\n                            focusOnItem(i);\n                        }}\n                        onKeyPress={(e) => {\n                            if (e.key === ' ' || e.key === \"Enter\") {\n                                props.onCharSelected(item.id);\n                                focusOnItem(i);\n                            }\n                        }}\n                        >\n                            <img src={item.thumbnail} alt={name} style={imgStyle}/>\n                            <div className=\"char__name\">{name}</div>\n                    </li>\n                </CSSTransition>\n                \n            )\n        })\n\n        return (\n            <ul className=\"char__grid\">\n                <TransitionGroup component={null}>\n                    {items}\n                </TransitionGroup>\n            </ul>\n        );\n    }\n\n    const elements = useMemo(() => {\n        return setContent(process, () => renderItems(charList), newItemsLoading);\n        // eslint-disable-next-line\n    }, [process])\n\n    return (\n        <div className=\"char__list\">\n            <ul className=\"char__grid\">\n                { elements }\n            </ul>\n            <button \n                className=\"button button__main button__long\"\n                disabled={newItemsLoading}\n                onClick={() => onRequest(offset)}\n                style={{'display': charEnded ? 'none' : 'block' }}\n            >\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\n\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n    const [char, setChar] = useState(null);\n\n    const { getCharacter, clearError, process, setProcess } = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n    }, [props.charId])\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        const { charId } = props;\n        if(!charId) return;\n\n        clearError();\n        getCharacter(charId)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n    return (\n        <div className=\"char__info\">\n            { setContent(process, View, char) }\n        </div>\n    )\n}\n\nconst View = ({data}) => {\n    const { name, description, thumbnail, homepage, wiki, comics } = data;\n\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail.indexOf('image_not_available') > -1) {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={ imgStyle }/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">{description}</div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length ? null : 'There is no comisc yet'}\n\n                {\n                    comics.map((item, i) => {\n                        // eslint-disable-next-line\n                        if (i > 9) return;\n                        return (\n                            <li key={i} className=\"char__comics-item\">\n                                {item.name}\n                            </li>\n                        )\n                    })\n                }\n\n                \n\n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","import {useState} from 'react';\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport {Link} from 'react-router-dom';\n\nimport useMarvelService from '../../services/MarvelService';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './CharSearchForm.scss';\n\nconst CharSearchForm = () => {\n    const [char, setChar] = useState(null);\n    const { getCharacterByName, clearError, process, setProcess } = useMarvelService();\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = (name) => {\n        clearError();\n\n        getCharacterByName(name)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'));\n    }\n\n    const errorMessage = process === 'error' ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\n    const results = !char ? null : char.length > 0 ?\n                    <div className=\"char__search-wrapper\">\n                        <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\n                        <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\n                            <div className=\"inner\">To page</div>\n                        </Link>\n                    </div> : \n                    <div className=\"char__search-error\">\n                        The character was not found. Check the name and try again\n                    </div>;\n\n    return (\n        <div className=\"char__search-form\">\n            <Formik\n                initialValues = {{\n                    charName: ''\n                }}\n                validationSchema = {Yup.object({\n                    charName: Yup.string().required('This field is required')\n                })}\n                onSubmit = { ({charName}) => {\n                    updateChar(charName);\n                }}\n            >\n                <Form>\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\n                    <div className=\"char__search-wrapper\">\n                        <Field \n                            id=\"charName\" \n                            name='charName' \n                            type='text' \n                            placeholder=\"Enter name\"/>\n                        <button \n                            type='submit' \n                            className=\"button button__main\"\n                            disabled={process === 'loading'}>\n                            <div className=\"inner\">find</div>\n                        </button>\n                    </div>\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\n                </Form>\n            </Formik>\n            {results}\n            {errorMessage}\n        </div>\n    )\n}\n\nexport default CharSearchForm;","import { Component } from 'react';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nclass ErrorBoundary extends Component {\n    state = {\n        error: false\n    }\n\n    componentDidCatch(err, errInfo) {\n        console.log(err);\n        console.log(errInfo);\n        this.setState({error: true});\n    }\n\n    render() {\n        if(this.state.error) {\n            return <ErrorMessage/>\n        }\n\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;","import { useState } from \"react\";\nimport { Helmet } from 'react-helmet';\n\nimport RandomChar from \"../randomChar/RandomChar\";\nimport CharList from \"../charList/CharList\";\nimport CharInfo from \"../charInfo/CharInfo\";\nimport CharSearchForm from \"../charSearchForm/CharSearchForm\";\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\n\nimport decoration from '../../resources/img/vision.png';\n\nconst MainPage = () => {\n    const [selectedChar, setChar] = useState(null);\n\n    const onCharSelected = (id) => {\n        setChar(id)\n    }\n\n    return (\n        <>\n            <Helmet>\n                <meta\n                    name=\"description\"\n                    content=\"Marvel information portal\"\n                    />\n                <title>Marvel information portal</title>\n            </Helmet>\n            <ErrorBoundary>\n                <RandomChar/>\n            </ErrorBoundary>\n            <div className=\"char__content\">\n                <ErrorBoundary>\n                    <CharList onCharSelected={onCharSelected}/>\n                </ErrorBoundary>\n                <div>\n                    <ErrorBoundary>\n                        <CharInfo charId={selectedChar}/>\n                    </ErrorBoundary>\n                    <ErrorBoundary>\n                        <CharSearchForm/>\n                    </ErrorBoundary>\n                </div>\n            </div>\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\n        </>\n    )\n}\n\nexport default MainPage;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { useHttp } from '../hooks/http.hook';\n\nconst useMarvelService = () => {\n    const { request, clearError, process, setProcess} = useHttp();\n\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\n    const _apiKey = 'apikey=063dce4e82535c86b5c64a1adff5895a';\n    const _baseOffset = 210;\n\n    const getAllCharacters = async (offset = _baseOffset) => {\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\n        return res.data.results.map(_transformCharacter)\n    }\n\n    // Вариант модификации готового метода для поиска по имени.\n\t// Вызывать его можно вот так: getAllCharacters(null, name)\n\n\t// const getAllCharacters = async (offset = _baseOffset, name = '') => {\n\t//     const res = await request(`${_apiBase}characters?limit=9&offset=${offset}${name ? `&name=${name}` : '' }&${_apiKey}`);\n\t//     return res.data.results.map(_transformCharacter);\n\t// }\n\n\t// Или можно создать отдельный метод для поиска по имени\n\n\tconst getCharacterByName = async (name) => {\n\t\tconst res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\n\t\treturn res.data.results.map(_transformCharacter);\n\t};\n\n    const getCharacter = async (id) => {\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n        return _transformCharacter(res.data.results[0]);\n    }\n\n    const getAllComics = async (offset = 0) => {\n        const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`);\n        return res.data.results.map(_transformComics);\n    }\n\n    const getComic = async (id) => {\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n        return _transformComics(res.data.results[0]);\n    }\n\n    const _transformCharacter = (char) => {\n        return {\n            id: char.id,\n            name: char.name,\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'Sorry, there is no description yet.',\n            thumbnail: `${char.thumbnail.path}.${char.thumbnail.extension}`,\n            homepage: char.urls[0].url,\n            wiki: char.urls[1].url,\n            comics: char.comics.items\n        }\n    }\n\n    const _transformComics = (comics) => {\n        return {\n            id: comics.id,\n            title: comics.title,\n            description: comics.description || 'There is no description',\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\n            language: comics.textObjects.language || 'en-us',\n            price: comics.prices.price ? `${comics.prices.price}$` : 'not available'\n        }\n    }\n\n    return { \n             process, \n             setProcess,\n             getAllCharacters, \n             getCharacterByName, \n             getCharacter, \n             getAllComics, \n             getComic, \n             clearError \n    };\n}\n\nexport default useMarvelService;","// import { useState, useCallback } from \"react\";\n\n// export const useHttp = () => {\n//     const [loading, setLoading] = useState(false);\n//     const [error, setError] = useState(null);\n\n//     const request = useCallback(\n//                     async (\n//                         url,\n//                         method = 'GET', \n//                         body = null, \n//                         headers = {'Content-Type': 'application/json'}\n//                     ) => {\n        \n//         setLoading(true);\n\n//         try {\n//             const response = await fetch(url, {method, body, headers});\n\n//             if(!response.ok) {\n//                 throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n//             }\n\n//             const data = await response.json();\n\n//             setLoading(false);\n//             return data;\n//         } catch(e) {\n//             setLoading(false);\n//             setError(e.message);\n//             throw e;\n//         }\n//     }, []);\n\n//     const clearError = useCallback(() => setError(null), []);\n\n//     return {loading, request, error, clearError};\n// }\n\nimport { useState, useCallback } from \"react\";\n\nexport const useHttp = () => {\n    const [process, setProcess] = useState('waiting');\n\n    const request = useCallback(\n                    async (\n                        url,\n                        method = 'GET', \n                        body = null, \n                        headers = {'Content-Type': 'application/json'}\n                    ) => {\n        setProcess('loading');\n\n        try {\n            const response = await fetch(url, {method, body, headers});\n\n            if(!response.ok) {\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n            }\n\n            const data = await response.json();\n\n            return data;\n        } catch(e) {\n            setProcess('error');\n            throw e;\n        }\n    }, []);\n\n    const clearError = useCallback(() => {\n        setProcess('loading');\n    }, []);\n\n    return { request, clearError, process, setProcess};\n}","import ErrorMessage from '../components/errorMessage/ErrorMessage';\nimport Skeleton from '../components/skeleton/Skeleton';\nimport Spinner from '../components/spinner/Spinner';\n\nconst setContent = (process, Component, data) => {\n    switch (process) {\n        case 'waiting':\n            return <Skeleton/>;\n            break;\n        case 'loading':\n            return <Spinner />;\n            break;\n        case 'confirmed':\n            return <Component data={data} />;\n            break;\n        case 'error':\n            return <ErrorMessage />;\n            break;\n        default:\n            throw new Error('Unexpected process state');\n    }\n};\n\nexport default setContent;"],"names":["style","display","width","height","objectFit","margin","src","img","alt","View","data","name","description","thumbnail","homepage","wiki","imgStyle","indexOf","className","href","useState","char","setChar","useMarvelService","getCharacter","clearError","process","setProcess","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","setContent","onClick","mjolnir","props","charList","setCharList","newItemsLoading","setNewItemsLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","length","itemRefs","useRef","focusOnItem","console","log","current","forEach","item","classList","remove","add","focus","elements","useMemo","Component","Skeleton","Spinner","ErrorMessage","Error","arr","items","map","i","CSSTransition","timeout","classNames","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","TransitionGroup","component","renderItems","disabled","comics","charId","getCharacterByName","errorMessage","results","to","initialValues","charName","validationSchema","Yup","required","onSubmit","htmlFor","type","placeholder","ErrorBoundary","state","error","err","errInfo","this","setState","children","selectedChar","Helmet","content","decoration","request","useCallback","url","method","body","headers","fetch","response","ok","status","json","useHttp","_apiBase","_apiKey","res","_transformCharacter","getAllComics","_transformComics","getComic","slice","path","extension","urls","title","pageCount","language","textObjects","price","prices"],"sourceRoot":""}