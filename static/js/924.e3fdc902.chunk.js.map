{"version":3,"file":"static/js/924.e3fdc902.chunk.js","mappings":"oLA+CA,UAxCmB,SAAH,GAA+B,IAA1BA,EAAS,EAATA,UAAWC,EAAQ,EAARA,SACjBC,GAAMC,EAAAA,EAAAA,MAAND,GACP,GAAwBE,EAAAA,EAAAA,UAAS,MAAK,eAA/BC,EAAI,KAAEC,EAAO,KACpB,GAAmEC,EAAAA,EAAAA,KAA3DC,EAAQ,EAARA,SAAUC,EAAY,EAAZA,aAAcC,EAAU,EAAVA,WAAYC,EAAO,EAAPA,QAASC,EAAU,EAAVA,YAErDC,EAAAA,EAAAA,YAAU,WACNC,GACJ,GAAG,CAACZ,IAEJ,IAAMY,EAAa,WAGf,OAFAJ,IAEQT,GACJ,IAAK,QACDO,EAASN,GACJa,KAAKC,GACLD,MAAK,kBAAMH,EAAW,YAAY,IACvC,MACJ,IAAK,YACDH,EAAaP,GACRa,KAAKC,GACLD,MAAK,kBAAMH,EAAW,YAAY,IACvC,MACJ,QACI,MAAM,IAAIK,MAAM,oBAE5B,EAEMD,EAAe,SAACX,GAClBC,EAAQD,EACZ,EAEA,OACI,iCACI,SAAC,IAAS,KACRa,EAAAA,EAAAA,GAAWP,EAASX,EAAWK,KAGjD,C,oEC1BA,EAjBiB,WACb,OACI,iCACI,cAAGc,UAAU,eAAc,2DAC3B,iBAAKA,UAAU,WAAU,WACrB,iBAAKA,UAAU,yBAAwB,WACnC,gBAAKA,UAAU,4BACf,gBAAKA,UAAU,6BAEnB,gBAAKA,UAAU,2BACf,gBAAKA,UAAU,2BACf,gBAAKA,UAAU,+BAI/B,C,kECMA,IAnBmB,SAACR,EAASX,EAAWK,GACpC,OAAQM,GACJ,IAAK,UACD,OAAO,SAAC,IAAQ,IAEpB,IAAK,UACD,OAAO,SAAC,IAAO,IAEnB,IAAK,YACD,OAAO,SAACX,EAAS,CAACK,KAAMA,IAE5B,IAAK,QACD,OAAO,SAAC,IAAY,IAExB,QACI,MAAM,IAAIY,MAAM,4BAE5B,C","sources":["components/pages/SinglePage.js","components/skeleton/Skeleton.js","utils/setContent.js"],"sourcesContent":["import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\n\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\nimport AppBanner from \"../appBanner/AppBanner\";\n\nconst SinglePage = ({Component, dataType}) => {\n        const {id} = useParams();\n        const [data, setData] = useState(null);\n        const { getComic, getCharacter, clearError, process, setProcess} = useMarvelService();\n\n        useEffect(() => {\n            updateData()\n        }, [id])\n\n        const updateData = () => {\n            clearError();\n\n            switch (dataType) {\n                case 'comic':\n                    getComic(id)\n                        .then(onDataLoaded)\n                        .then(() => setProcess('confirmed'));\n                    break;\n                case 'character':\n                    getCharacter(id)\n                        .then(onDataLoaded)\n                        .then(() => setProcess('confirmed'));\n                    break;\n                default:\n                    throw new Error('Unexpected error');\n            }\n        }\n\n        const onDataLoaded = (data) => {\n            setData(data);\n        }\n\n        return (\n            <>\n                <AppBanner/>\n                { setContent(process, Component, data) }\n            </>\n        )\n}\n\nexport default SinglePage;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import ErrorMessage from '../components/errorMessage/ErrorMessage';\nimport Skeleton from '../components/skeleton/Skeleton';\nimport Spinner from '../components/spinner/Spinner';\n\nconst setContent = (process, Component, data) => {\n    switch (process) {\n        case 'waiting':\n            return <Skeleton/>;\n            break;\n        case 'loading':\n            return <Spinner />;\n            break;\n        case 'confirmed':\n            return <Component data={data} />;\n            break;\n        case 'error':\n            return <ErrorMessage />;\n            break;\n        default:\n            throw new Error('Unexpected process state');\n    }\n};\n\nexport default setContent;"],"names":["Component","dataType","id","useParams","useState","data","setData","useMarvelService","getComic","getCharacter","clearError","process","setProcess","useEffect","updateData","then","onDataLoaded","Error","setContent","className"],"sourceRoot":""}